pipeline {
        environment {
            /*
            *  APP Name should be as same as repo, project & helm chart name
            *  APP Version needs to be upgraded once prod push (Now e2e)
            *  APP Category decides to which namespace the app should get deployed 
            *  Acceptable categories are  => api| ui| ml| tools
            */
            APP_NAME = "node-es-proxy"
            APP_VERSION = "1.0.0"
            APP_CATEGORY = "api"
            APP_INGRESS_DNS_BASE = "sizecorner.com"
            APP_INGRESS_DOMAIN_PREFIX = "elastic-proxy"
            /* 
            * Common config 
            * Registry
            */
            // Registry details
            REGISTRY_BASE_URI = "ialuy97a.gra7.container-registry.ovh.net"
            REGISTRY_GROUP_NAME = "colakin-dev"
            REGISTRY_IMAGE_BASE = "${REGISTRY_BASE_URI}/${REGISTRY_GROUP_NAME}/${APP_NAME}"
            
            HELM_TEMPLATES_PATH = "helm/"
            DOCKERFILE_PATH = "Dockerfile"

            OVH_REGISTRY_CREDENTIALS = credentials('ovh-container-registry')
    }
    
    agent { label 'clk-jenkins-nodejs-agent:1.0.0' }

    stages {
        
        // App packaging and Docker build
        stage('Build'){
            steps{
            
                sh "echo The current branch is ${env.BRANCH_NAME}"
                // Defaulting
                script {
                    switch (env.BRANCH_NAME) {
                       
                        /* 
                        * E2E branch and later will be refered prod branch
                        * BUILD_TAG has to be latest whenever pushing to dev
                        * ENVIRONMENT decides the application config/ property file
                        */
                        case "master":
                            env.BUILD_TAG = input message: 'Update the Production Version!', parameters: [string(defaultValue: '0', description: 'Update App Version', name: 'Version')]
                            env.ENVIRONMENT = "prod"
                            env.K8S_NAMESPACE = "prod-${env.APP_CATEGORY}"
                            env.INGRESS_ENABLED = true
                            env.INGRESS_DOMAIN = "${env.APP_INGRESS_DOMAIN_PREFIX}.${env.APP_INGRESS_DNS_BASE}"
                            break   
                        default:
                            env.BUILD_TAG = "latest"
                            env.ENVIRONMENT = "dev"
                            env.K8S_NAMESPACE = "dev-${env.APP_CATEGORY}"
                            env.INGRESS_ENABLED = true
                            env.INGRESS_DOMAIN = "${env.APP_INGRESS_DOMAIN_PREFIX}.${env.APP_INGRESS_DNS_BASE}"
                            break
                    }
                }
                
                script {
                     sh "npm install"
                }
                
                script {
                    try{
                        sh "docker rmi ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG}"
                    }catch (e){
                        sh "echo STEP SKIPPED: No Image with same name found to remove"
                    }
                }
                sh "docker build -f ${env.DOCKERFILE_PATH} -t ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG} ."                
            }
        }
        
        stage('Push'){
            steps{
                    sh "docker login -u $OVH_REGISTRY_CREDENTIALS_USR -p $OVH_REGISTRY_CREDENTIALS_PSW ${REGISTRY_BASE_URI}"
                    sh "docker push ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG}"
            }
        }
        
        stage('Deploy'){
             steps{
                         script {
                            if (env.BRANCH_NAME == "master") {
                                // deployment to production
                                withKubeConfig(credentialsId: 'access_to_kubeconfig'){
                                    deploymentScript()
                                }
                            }else{
                                // deployment to non-production
                                withKubeConfig(credentialsId: 'access_to_kubeconfig'){
                                    deploymentScript()
                                }
                            }
                        }
                    }
        }
    }
    // Send notification
    post {
        success {
            script {
                wrap([$class: 'BuildUser']) {
                    slackSend(color: '#00FF00', message: "SUCCESS: ${env.JOB_NAME} job started by ${BUILD_USER} has been deployed successfully to ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}" )
                    discordSend(description: "SUCCESS: ${env.JOB_NAME} job started by ${BUILD_USER} has been deployed successfully to ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}", result: "SUCCESS", webhookURL: 'https://discord.com/api/webhooks/904239478200234014/7j9fnPTeGIjE4-NKraUGUFYsO8RvMu58FnOSLlnA7nxW-f2glqJ24h5-wiH9i3e8D9nH')

                }
            }
        }
        failure{
            script {
                wrap([$class: 'BuildUser']) {
                    slackSend(color: '#FF0000', message: "FAILURE: ${env.JOB_NAME} job started by ${BUILD_USER} was failed to deploy in ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}")
                    discordSend(description: "FAILURE: ${env.JOB_NAME} job started by ${BUILD_USER} was failed to deploy in ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}", result: "FAILURE", webhookURL: 'https://discord.com/api/webhooks/904239478200234014/7j9fnPTeGIjE4-NKraUGUFYsO8RvMu58FnOSLlnA7nxW-f2glqJ24h5-wiH9i3e8D9nH')
                }
            }
        }
    }
}

// deployment scripts as a func
void deploymentScript(){
    try{
        sh "echo The current Namespace is ${env.K8S_NAMESPACE} and environment is ${env.ENVIRONMENT}"
        sh "helm upgrade ${env.APP_NAME} helm/. --namespace=${env.K8S_NAMESPACE} --set image.tag=${env.BUILD_TAG} --set environment=${env.ENVIRONMENT} --set ingress.enabled=${env.INGRESS_ENABLED} --set ingress.domain=${env.INGRESS_DOMAIN}"
    }catch (e){
        sh "echo STEP SKIPPED: No chart with same name found to upgrade"
        sh "helm install ${env.APP_NAME} helm/. --namespace=${env.K8S_NAMESPACE} --set image.tag=${env.BUILD_TAG} --set environment=${env.ENVIRONMENT} --set ingress.enabled=${env.INGRESS_ENABLED} --set ingress.domain=${env.INGRESS_DOMAIN}"
    }

    // Review
    sh "kubectl get all -n ${env.K8S_NAMESPACE} | grep ${env.APP_NAME}"
    sh "kubectl get ing -n ${env.K8S_NAMESPACE} | grep ${env.APP_NAME}"
}